0 info it worked if it ends with ok
1 verbose cli [ '/Users/willkan/.nvm/versions/node/v4.4.1/bin/node',
1 verbose cli   '/Users/willkan/.nvm/versions/node/v4.4.1/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.8.3
3 info using node@v4.4.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/willkan/work/react-leaflet',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/willkan/.npm/react-leaflet-pane/0.11.8/package.tgz not in flight; packing
9 verbose correctMkdir /Users/willkan/.npm correctMkdir not in flight; initializing
10 info lifecycle react-leaflet-pane@0.11.8~prepublish: react-leaflet-pane@0.11.8
11 verbose lifecycle react-leaflet-pane@0.11.8~prepublish: unsafe-perm in lifecycle true
12 verbose lifecycle react-leaflet-pane@0.11.8~prepublish: PATH: /Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/bin/node-gyp-bin:/Users/willkan/work/react-leaflet/node_modules/.bin:/Users/willkan/.nvm/versions/node/v4.4.1/bin:/Users/willkan/.nvm/versions/node/v4.4.1/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin:/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Users/willkan/Documents/sh
13 verbose lifecycle react-leaflet-pane@0.11.8~prepublish: CWD: /Users/willkan/work/react-leaflet
14 silly lifecycle react-leaflet-pane@0.11.8~prepublish: Args: [ '-c', 'npm ls && npm start' ]
15 silly lifecycle react-leaflet-pane@0.11.8~prepublish: Returned: code: 0  signal: null
16 verbose tar pack [ '/Users/willkan/.npm/react-leaflet-pane/0.11.8/package.tgz',
16 verbose tar pack   '/Users/willkan/work/react-leaflet' ]
17 verbose tarball /Users/willkan/.npm/react-leaflet-pane/0.11.8/package.tgz
18 verbose folder /Users/willkan/work/react-leaflet
19 verbose addLocalTarball adding from inside cache /Users/willkan/.npm/react-leaflet-pane/0.11.8/package.tgz
20 verbose correctMkdir /Users/willkan/.npm correctMkdir not in flight; initializing
21 silly cache afterAdd react-leaflet-pane@0.11.8
22 verbose afterAdd /Users/willkan/.npm/react-leaflet-pane/0.11.8/package/package.json not in flight; writing
23 verbose correctMkdir /Users/willkan/.npm correctMkdir not in flight; initializing
24 verbose afterAdd /Users/willkan/.npm/react-leaflet-pane/0.11.8/package/package.json written
25 silly publish { name: 'react-leaflet-pane',
25 silly publish   version: '0.11.8',
25 silly publish   description: 'React components for Leaflet maps',
25 silly publish   main: 'lib/index.js',
25 silly publish   scripts:
25 silly publish    { 'clean:lib': 'rm -Rf ./lib',
25 silly publish      'compile:lib': 'babel src --out-dir lib',
25 silly publish      'build:lib': 'npm run clean:lib && npm run compile:lib',
25 silly publish      'build:dist': 'webpack src/index.js dist/react-leaflet.js & webpack -p src/index.js dist/react-leaflet.min.js',
25 silly publish      build: 'npm run build:lib && npm run build:dist',
25 silly publish      watch: 'babel src --watch --out-dir lib',
25 silly publish      start: 'npm run lint && npm run test && npm run build',
25 silly publish      test: 'jest --coverage',
25 silly publish      onchange: 'onchange \'src/*.js\' \'src/**/*.js\' -- npm run lintAndTest',
25 silly publish      dev: 'npm run watch & npm run onchange',
25 silly publish      prepublish: 'npm ls && npm start',
25 silly publish      examples: 'webpack-dev-server --config ./example/webpack.config.js',
25 silly publish      lint: 'eslint ./src',
25 silly publish      lintAndTest: 'npm run lint && jest' },
25 silly publish   repository:
25 silly publish    { type: 'git',
25 silly publish      url: 'git+https://github.com/willkan/react-leaflet.git' },
25 silly publish   keywords: [ 'react-component', 'react', 'leaflet', 'map' ],
25 silly publish   author: { name: 'Paul Le Cam', email: 'paul@ulem.net' },
25 silly publish   license: 'MIT',
25 silly publish   bugs: { url: 'https://github.com/PaulLeCam/react-leaflet/issues' },
25 silly publish   homepage: 'https://github.com/PaulLeCam/react-leaflet',
25 silly publish   dependencies: { leaflet: '^1.0.0-rc.2', lodash: '^4.0.0' },
25 silly publish   peerDependencies:
25 silly publish    { leaflet: '^0.7.0 || ^1.0.0-rc.2',
25 silly publish      react: '^0.14.0 || ^15.0.0',
25 silly publish      'react-dom': '^0.14.0 || ^15.0.0' },
25 silly publish   devDependencies:
25 silly publish    { 'babel-cli': '^6.10.1',
25 silly publish      'babel-core': '^6.9.1',
25 silly publish      'babel-eslint': '^6.0.4',
25 silly publish      'babel-jest': '^12.1.0',
25 silly publish      'babel-loader': '^6.2.4',
25 silly publish      'babel-plugin-dev-expression': '^0.2.1',
25 silly publish      'babel-plugin-lodash': '^3.2.0',
25 silly publish      'babel-plugin-react-transform': '^2.0.2',
25 silly publish      'babel-preset-es2015': '^6.9.0',
25 silly publish      'babel-preset-react': '^6.5.0',
25 silly publish      'babel-preset-stage-0': '^6.5.0',
25 silly publish      eslint: '^2.11.1',
25 silly publish      'eslint-plugin-react': '^5.1.1',
25 silly publish      'jest-cli': '^12.1.1',
25 silly publish      'lodash-webpack-plugin': '^0.9.1',
25 silly publish      onchange: '^2.5.0',
25 silly publish      react: '^15.1.0',
25 silly publish      'react-addons-test-utils': '^15.1.0',
25 silly publish      'react-dom': '^15.1.0',
25 silly publish      'react-transform-hmr': '^1.0.4',
25 silly publish      webpack: '^1.13.1',
25 silly publish      'webpack-dev-server': '^1.14.1',
25 silly publish      warning: '^3.0.0' },
25 silly publish   jest:
25 silly publish    { scriptPreprocessor: '<rootDir>/node_modules/babel-jest',
25 silly publish      unmockedModulePathPatterns:
25 silly publish       [ '<rootDir>/node_modules/fbjs',
25 silly publish         '<rootDir>/node_modules/jest-cli',
25 silly publish         '<rootDir>/node_modules/lodash',
25 silly publish         '<rootDir>/node_modules/react',
25 silly publish         '<rootDir>/node_modules/react-dom' ] },
25 silly publish   readme: '# React-Leaflet\n\nReact components for Leaflet maps.\n\n- [Installation](#installation)\n- [Getting started](#getting-started)\n- [Technical considerations](#technical-considerations)\n- [API](#api)\n  - [Helpers](#helpers)\n  - [PropTypes](#proptypes)\n  - [Events](#events)\n  - [Components](#components)\n- [Creating custom components](#creating-custom-components)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install react-leaflet\n```\n\nReact, ReactDOM and Leaflet are peer dependencies, if you haven\'t already installed them use:\n\n```bash\nnpm install leaflet react react-dom react-leaflet\n```\n\nAn UMD build is also available on [npmcdn](https://npmcdn.com/):\n\n```html\n<script src="https://npmcdn.com/react-leaflet/dist/react-leaflet.min.js"></script>\n```\n\nThe library is injected as `window.ReactLeaflet`.\n\n## Getting started\n\nIf you are not familiar with Leaflet, make sure you read its [quick start guide](http://leafletjs.com/examples/quick-start.html) first. You will need to add its CSS to your page to render the components properly.\n\nAll components are React wrappers for Leaflet elements and layers, they need a map instance and therefore must be included in a top-level `<Map>` component.\n\n**Leaflet example**\n```js\nimport L from \'leaflet\';\n\nconst position = [51.505, -0.09];\nconst map = L.map(\'map\').setView(position, 13);\n\nL.tileLayer(\'http://{s}.tile.osm.org/{z}/{x}/{y}.png\', {\n  attribution: \'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors\'\n}).addTo(map);\n\nL.marker(position).addTo(map)\n  .bindPopup(\'A pretty CSS3 popup. <br> Easily customizable.\');\n```\n\n**React-Leaflet**\n```jsx\nimport React from \'react\';\nimport { render } from \'react-dom\';\nimport { Map, Marker, Popup, TileLayer } from \'react-leaflet\';\n\nconst position = [51.505, -0.09];\nconst map = (\n  <Map center={position} zoom={13}>\n    <TileLayer\n      url=\'http://{s}.tile.osm.org/{z}/{x}/{y}.png\'\n      attribution=\'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors\'\n    />\n    <Marker position={position}>\n      <Popup>\n        <span>A pretty CSS3 popup.<br/>Easily customizable.</span>\n      </Popup>\n    </Marker>\n  </Map>\n);\n\nrender(map, document.getElementById(\'map-container\'));\n```\nNote that the `<Map>` component creates its own `<div>` container for the map, it does not get attached to an existing node.\n\n## Technical considerations\n\nThis library uses React components as an interface, but not the virtual DOM, as all the DOM manipulations are managed by Leaflet, so there are a few things to keep in mind when using it:\n\n- Leaflet makes direct calls to the DOM when it is loaded, therefore this library is not compatible with server-side rendering.\n- The components exposed are abstractions for Leaflet layers, not DOM elements. Some of them have properties that can be updated directly by calling the setters exposed by Leaflet while others should be completely replaced, by setting an unique value on their `key` property so that they are properly handled by React\'s algorithm.\n- Not all layers are implemented and even less tested.\n\n## API\n\n### Helpers\n\n**setIconDefaultImagePath(path: string)**: Setter for `Leaflet.Icon.Default.imagePath`, set to `//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images` by default.\n\n### PropTypes\n\n**children**: One `PropTypes.node` or an Array of `PropTypes.node`.\n\n**latLng**: One of `[number, number]`, `{lat: number, lng: number}` or `{lat: number, lon: number}`.\n\n**latLngList**: An Array of *LatLng*.\n\n**bounds**: An instance of *Leaflet.LatLngBounds* or a *LatLngList*.\n\n**controlPosition**: One of `topleft`, `topright`, `bottomleft` or `bottomright`.\n\n**layerContainer**: An object containing `addLayer()` and `removeLayer()` functions.\n\n### Events\n\nLeaflet exposes its own events, different from React. You can listen to them using React-Leaflet by adding a callback to a property prefixed by `on`. Ex: `<Map onMoveend={this.handleMoveend}>...</Map>`.  \nCheck Leaflet documentation for the events associated to each component.\n\n### Components\n\nThe properties documented as **dynamic properties** are updated using the relevant Leaflet setter, other properties will *not* update the component when they are changed after the component is mounted.  \nAll other properties are passed as the `options` argument to their corresponding Leaflet element and should work fine for static maps, it is however unlikely that they would updated if you change them afterwards.\n\nYou can directly access the Leaflet element created by a component using the `getLeafletElement()` method on this component. This leaflet element is usually created in `componentWillMount()`, except for the `Map` component where it can only be created after the `<div>` container is rendered.\n\n#### Base components\n\nThese components are base classes used by other components. They can be extended to create custom components but should not be used directly.\n\n##### MapComponent\n\nBase class extending `React.Component` and handling events binding and unbind.  \nIt exposes a `getLeafletElement()` method to access the `Leaflet` object created for the component.\n\n##### MapControl\n\nBase class extending `React.Component` for controls.  \nIt exposes a `getLeafletElement()` method to access the `Leaflet` object created for the control.\n\n##### MapLayer\n\nBase class extending [`MapComponent`](#mapcomponent) using the provided `map` prop to add its element and passing it down to its children.  \nIt exposes the following methods:\n- `getClonedChildrenWithMap(object extra): object`: returns the cloned children of the component, adding the `map` and the `extra` props provided to them.\n- `renderChildrenWithProps(object props): object`: returns the cloned children of the component using `getClonedChildrenWithMap()`, wrapped in a `<div>` with `display: none` style.\n\n##### BaseTileLayer\n\nBase class extending [`MapLayer`](#maplayer) with a `render()` method and handling a TitleLayer `opacity` and `zIndex` props.\n\n##### Path\n\nBase class extending [`MapLayer`](#maplayer) with the following methods:\n- `getPathOptions(object props): object`: filters the input `props` and return a new object of [Path options](http://leafletjs.com/reference.html#path-options) properties.\n- `setStyle(object options = {}): void`: alias to the Leaflet element [`setStyle()`](http://leafletjs.com/reference.html#path-setstyle).\n- `setStyleIfChanged(object fromProps, object toProps): void`: extracts the Path options of the two arguments, and calls `setStyle()` with the new options if different from the previous ones.\n\n#### Map\n\nThis is the top-level component that must be mounted for children ones to be rendered. Refer to [Leaflet documentation](http://leafletjs.com/reference.html#map-options) for more information about the properties.\n\n**Dynamic properties**\n- `animate: boolean` (optional): If `true`, panning will always be animated if possible. Defaults to `false`.\n- `bounds: bounds` (optional): A rectangle for the map to contain. It will be centered, and the map will zoom in as close as it can while still showing the full bounds. This property is dynamic, if you change it it will be reflected on the map.\n- `boundsOptions: object` (optional): Options passed to the `fitBounds()` method.\n- `center: latLng` (optional): Center of the map. This property is dynamic, if you change it it will be reflected in the map.\n- `className: string` (optional): className property of the `<div>` container for the map.\n- `maxBounds: bounds` (optional)\n- `style: object` (optional): style property of the `<div>` container for the map.\n- `zoom: number` (optional)\n\n**Other properties**\n- `id: string` (optional): The ID of the `<div>` container for the map. If you don\'t provide it, a unique one will be created.\n\n#### UI Layers\n\n##### Marker\n\n[Leaflet reference](http://leafletjs.com/reference.html#marker)\n\n**Dynamic properties**\n- `position: latLng` (required)\n- `draggable: boolean` (optional)\n- `icon: Leaflet.Icon` (optional)\n- `zIndexOffset: number` (optional)\n- `opacity: number` (optional)\n\n##### Popup\n\n[Leaflet reference](http://leafletjs.com/reference.html#popup)\n\nThe Popup children will be rendered using `ReactDOM.render()`, they must be valid React elements.\n\n**Dynamic properties**\n- `position: latLng` (optional)\n\n#### Raster Layers\n\n##### TileLayer\n\n[Leaflet reference](http://leafletjs.com/reference.html#tilelayer)\n\n**Dynamic properties**\n- `url: string` (required)\n- `opacity: number` (optional)\n- `zIndex: number` (optional)\n\n##### ImageOverlay\n\n[Leaflet reference](http://leafletjs.com/reference.html#imageoverlay)\n\n**Dynamic properties**\n- `url: string` (required)\n- `opacity: number` (optional)\n\n##### Implemented but needing testing and documentation\n\n- CanvasTileLayer\n- WMSTileLayer\n\n#### Vector Layers\n\nAll vector layers extend the **Path** component and therefore accept dynamic [Path options](http://leafletjs.com/reference.html#path-options) properties.\n\n##### Circle\n\n[Leaflet reference](http://leafletjs.com/reference.html#circle)\n\n**Dynamic properties**\n- `center: latLng` (required)\n- `radius: number` (required)\n\n##### CircleMarker\n\n[Leaflet reference](http://leafletjs.com/reference.html#circlemarker)\n\n**Dynamic properties**\n- `center: latLng` (required)\n- `radius: number` (optional)\n\n##### Polyline\n\n[Leaflet reference](http://leafletjs.com/reference.html#polyline)\n\n**Dynamic properties**\n- `positions: latLngList` (required)\n\n##### MultiPolyline\n\n[Leaflet reference](http://leafletjs.com/reference.html#multipolyline)\n\n**Dynamic properties**\n- `polylines: array<latLngList>` (required)\n\n##### Polygon\n\n[Leaflet reference](http://leafletjs.com/reference.html#polygon)\n\n**Dynamic properties**\n- `positions: latLngList | Array<latLngList>` (required)\n\n##### MultiPolygon\n\n[Leaflet reference](http://leafletjs.com/reference.html#multipolygon)\n\n**Dynamic properties**\n- `polygons: array<latLngList>` (required)\n\n##### Rectangle\n\n[Leaflet reference](http://leafletjs.com/reference.html#rectangle)\n\n**Dynamic properties**\n- `bounds: bounds` (required, dynamic)\n\n#### Other Layers\n\n##### LayerGroup\n\nUse the `LayerGroup` wrapper component to group children layers together.\n\n##### FeatureGroup\n\nExtended `LayerGroup` supporting a `Popup` child.\n\n##### GeoJson\n\n[Leaflet reference](http://leafletjs.com/reference.html#geojson)\n\n**Properties**\n- `data: GeoJSON` (required). This property will *not* be updated if it is changed after the component is mounted.\n\n#### Controls\n\n##### AttributionControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-attribution)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n##### LayersControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-layers)  \n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\nThis component exposes two children container components, `LayersControl.BaseLayer` and `LayersControl.Overlay` documented below.  \nSee the `layers-control` example for a more advanced usage.\n\nExample usage:\n```jsx\n<LayersControl position=\'topright\'>\n  <LayersControl.BaseLayer name=\'OpenStreetMap.BlackAndWhite\'>\n    <TileLayer\n      attribution=\'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors\'\n      url=\'http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\'\n    />\n  </LayersControl.BaseLayer>\n  <LayersControl.BaseLayer name=\'OpenStreetMap.Mapnik\'>\n    <TileLayer\n      attribution=\'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors\'\n      url=\'http://{s}.tile.osm.org/{z}/{x}/{y}.png\'\n    />\n  </LayersControl.BaseLayer>\n  <LayersControl.Overlay name=\'Marker with popup\'>\n    <Marker position={[51.51, -0.06]}>\n      <Popup>\n        <span>A pretty CSS3 popup. <br/> Easily customizable.</span>\n      </Popup>\n    </Marker>\n  </LayersControl.Overlay>\n  <LayersControl.Overlay name=\'Feature group\'>\n    <FeatureGroup color=\'purple\'>\n      <Popup>\n        <span>Popup in FeatureGroup</span>\n      </Popup>\n      <Circle center={[51.51, -0.06]} radius={200} />\n    </FeatureGroup>\n  </LayersControl.Overlay>\n</LayersControl>\n```\n\n##### LayersControl.BaseLayer\n\n**Properties**\n- `name: string` (required). The name of the layer as appearing in the `LayersControl`.\n\n**Dynamic properties**\n- `checked: boolean` (optional, defaults to `false`). Whether the radio button associated to the layer should be checked or not. The layer will be displayed in the map accordingly.\n\n##### LayersControl.Overlay\n\n**Properties**\n- `name: string` (required). The name of the layer as appearing in the `LayersControl`.\n\n**Dynamic properties**\n- `checked: boolean` (optional, defaults to `false`). Whether the checkbox associated to the layer should be checked or not. The layer will be displayed in the map accordingly.\n\n##### ScaleControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-scale)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n##### ZoomControl\n\n[Leaflet reference](http://leafletjs.com/reference.html#control-zoom)\n\n**Dynamic properties**\n- `position: controlPosition` (optional)\n\n## Creating custom components\n\nIf you want to create custom components, for example Leaflet plugins, you could extend one of the [base components](https://github.com/PaulLeCam/react-leaflet#base-components) depending on the type of component you want to implement.  \nThe created Leaflet map instance is injected by the `Map` component to all its children as the `map` property. Other layers may inject themselves to their children as the `layerContainer` property.  \nMake sure to inject **both** `layerContainer` and `map` in your component\'s children as well.\n\n## Changelog\n\nSee [CHANGELOG](https://github.com/PaulLeCam/react-leaflet/blob/master/CHANGELOG.md) file.\n\n## License\n\nMIT  \nSee [LICENSE](https://github.com/PaulLeCam/react-leaflet/blob/master/LICENSE) file.\n',
25 silly publish   readmeFilename: 'README.md',
25 silly publish   gitHead: 'ada40c9d726b44411e8d756f1e316ef7632d8f1e',
25 silly publish   _id: 'react-leaflet-pane@0.11.8',
25 silly publish   _shasum: '794125dd5d2553295a265ef24f6ec03b104ed85e',
25 silly publish   _from: '.' }
26 verbose getPublishConfig undefined
27 silly mapToRegistry name react-leaflet-pane
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry https://registry.npmjs.org/
30 silly mapToRegistry data Result {
30 silly mapToRegistry   raw: 'react-leaflet-pane',
30 silly mapToRegistry   scope: null,
30 silly mapToRegistry   name: 'react-leaflet-pane',
30 silly mapToRegistry   rawSpec: '',
30 silly mapToRegistry   spec: 'latest',
30 silly mapToRegistry   type: 'tag' }
31 silly mapToRegistry uri https://registry.npmjs.org/react-leaflet-pane
32 verbose publish registryBase https://registry.npmjs.org/
33 silly publish uploading /Users/willkan/.npm/react-leaflet-pane/0.11.8/package.tgz
34 verbose request uri https://registry.npmjs.org/react-leaflet-pane
35 verbose request sending authorization for write operation
36 info attempt registry request try #1 at 13:59:26
37 verbose request id c7ea34718c6ebba5
38 http request PUT https://registry.npmjs.org/react-leaflet-pane
39 http 403 https://registry.npmjs.org/react-leaflet-pane
40 verbose headers { 'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=300',
40 verbose headers   'content-length': '96',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Fri, 29 Jul 2016 05:59:38 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-lcy1135-LCY',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1469771975.780187,VS0,VE2505',
40 verbose headers   vary: 'Accept-Encoding' }
41 verbose request invalidating /Users/willkan/.npm/registry.npmjs.org/react-leaflet-pane on PUT
42 error publish Failed PUT 403
43 verbose stack Error: "You cannot publish over the previously published version 0.11.8." : react-leaflet-pane
43 verbose stack     at makeError (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/npm-registry-client/lib/request.js:264:12)
43 verbose stack     at CachingRegistryClient.<anonymous> (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/npm-registry-client/lib/request.js:252:14)
43 verbose stack     at Request._callback (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/npm-registry-client/lib/request.js:172:14)
43 verbose stack     at Request.self.callback (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/request/request.js:199:22)
43 verbose stack     at emitTwo (events.js:87:13)
43 verbose stack     at Request.emit (events.js:172:7)
43 verbose stack     at Request.<anonymous> (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/request/request.js:1036:10)
43 verbose stack     at emitOne (events.js:82:20)
43 verbose stack     at Request.emit (events.js:169:7)
43 verbose stack     at IncomingMessage.<anonymous> (/Users/willkan/.nvm/versions/node/v4.4.1/lib/node_modules/.npm_npminstall/npm/3.8.3/npm/node_modules/request/request.js:963:12)
44 verbose statusCode 403
45 verbose pkgid react-leaflet-pane
46 verbose cwd /Users/willkan/work/react-leaflet
47 error Darwin 15.6.0
48 error argv "/Users/willkan/.nvm/versions/node/v4.4.1/bin/node" "/Users/willkan/.nvm/versions/node/v4.4.1/bin/npm" "publish"
49 error node v4.4.1
50 error npm  v3.8.3
51 error code E403
52 error "You cannot publish over the previously published version 0.11.8." : react-leaflet-pane
53 error If you need help, you may report this error at:
53 error     <https://github.com/npm/npm/issues>
54 verbose exit [ 1, true ]
